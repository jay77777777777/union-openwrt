#云编译公用核心
name: 联合编译公用核心

on:
  #公用核心标识
  workflow_call:
    inputs:
      CORE_TARGET:
        required: true
        type: string
      CORE_THEME:
        required: true
        type: string
      CORE_NAME:
        required: true
        type: string
      CORE_URL:
        required: true
        type: string
      CORE_PW:
        required: true
        type: string
      CORE_IP:
        required: true
        type: string
      CORE_BRANCH:
        required: true
        type: string
      CORE_tag_name:
        required: true
        type: string
      CORE_header:
        required: true
        type: string
      CORE_config:
        required: true
        type: string
      CORE_patch:
        required: true
        type: string
      CORE_SOC_P1_SH:
        required: true
        type: string
      CORE_SOC_P2_SH:
        required: true
        type: string
      CORE_DIY_P1_SH:
        required: true
        type: string
      CORE_DIY_P2_SH:
        required: true
        type: string
      CORE_DIY_P3_SH:
        required: true
        type: string
      CORE_DIY_P4_SH:
        required: true
        type: string
      CORE_remove:
        required: true
        type: string
      CORE_LINUX:
        required: true
        type: string
      CORE_FILES:
        required: true
        type: string
      kernel_repo:
        required: true
        type: string
      kernel_usage:
        required: true
        type: string
      builder_name:
        required: true
        type: string
      auto_kernel:
        required: true
        type: string
      CORE_Pack:
        required: true
        type: string
      CORE_feeds_conf:
        required: true
        type: string      
env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  CORE_TARGET: ${{inputs.CORE_TARGET}}
  CORE_THEME: ${{inputs.CORE_THEME}}
  CORE_NAME: ${{inputs.CORE_NAME}}
  CORE_URL: ${{inputs.CORE_URL}}
  CORE_PW: ${{inputs.CORE_PW}}
  CORE_IP: ${{inputs.CORE_IP}}
  CORE_BRANCH: ${{inputs.CORE_BRANCH}}
  CORE_tag_name: ${{inputs.CORE_tag_name}}
  CORE_header: header/${{inputs.CORE_header}}
  CORE_config: config/${{inputs.CORE_config}}
  CORE_patch: patch/${{inputs.CORE_patch}}
  CORE_SOC_P1_SH: soc/${{inputs.CORE_SOC_P1_SH}}
  CORE_SOC_P2_SH: soc/${{inputs.CORE_SOC_P2_SH}}
  CORE_DIY_P1_SH: Scripts/${{inputs.CORE_DIY_P1_SH}}
  CORE_DIY_P2_SH: Scripts/${{inputs.CORE_DIY_P2_SH}}
  CORE_DIY_P3_SH: Scripts/${{inputs.CORE_DIY_P3_SH}}
  CORE_DIY_P4_SH: Scripts/${{inputs.CORE_DIY_P4_SH}}
  CORE_remove: remove/${{inputs.CORE_remove}}
  CORE_LINUX: ${{inputs.CORE_LINUX}}
  CORE_FILES: patch/${{inputs.CORE_FILES}}
  kernel_repo: ${{inputs.kernel_repo}}
  kernel_usage: ${{inputs.kernel_usage}}
  builder_name: ${{inputs.builder_name}}
  auto_kernel: ${{inputs.auto_kernel}}
  CORE_Pack: ${{inputs.CORE_Pack}}
  CORE_feeds_conf: patch/${{inputs.CORE_feeds_conf}}
  TZ: Asia/Shanghai

jobs:
  union_core:
    runs-on: ubuntu-latest
    steps:
      - name: 清理服务器空间(Ubuntu)
        uses: rmoyulong/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: true

          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
        
      - name: 项目检查
        uses: actions/checkout@main

      - name: 检查分配的服务器性能
        run: |
          echo "警告⚠"
          echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
          echo -e "已知CPU型号（降序）：7763，8370C，8272CL，8171M，E5-2673 \n"
          echo "--------------------------CPU信息--------------------------"
          echo "CPU物理数量：$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
          echo -e "CPU核心信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
          echo "--------------------------内存信息--------------------------"
          echo "已安装内存详细信息："
          echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
          echo "--------------------------硬盘信息--------------------------"
          echo "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT   

      - name: 初始化编译环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get -qq update --fix-missing
          sudo -E apt-get -qq full-upgrade
          sudo -E apt-get -y install $(cat $GITHUB_WORKSPACE/Ubuntu-2204.txt)
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo -E systemctl daemon-reload
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
          echo "status=success" >> ${GITHUB_OUTPUT}
          df -Th              

      - name: 初始化变量
        run: |
          export CORE_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S")
          export CORE_SOURCE=$(echo $CORE_URL | cut -d '/' -f 5-)
          
          echo "CORE_SOURCE=$CORE_SOURCE" >> $GITHUB_ENV
          echo "CORE_TARGET=$CORE_TARGET" >> $GITHUB_ENV
          echo "CORE_DATE=$CORE_DATE" >> $GITHUB_ENV
          echo "CORE_PW=$CORE_PW" >> $GITHUB_ENV
          echo "CORE_IP=$CORE_IP" >> $GITHUB_ENV
          echo "CORE_BRANCH=$CORE_BRANCH" >> $GITHUB_ENV
          echo "CORE_tag_name=$CORE_tag_name" >> $GITHUB_ENV
          echo "CORE_header=$CORE_header" >> $GITHUB_ENV
          echo "CORE_config=$CORE_config" >> $GITHUB_ENV
          echo "CORE_patch=$CORE_patch" >> $GITHUB_ENV
          echo "CORE_SOC_P1_SH=$CORE_SOC_P1_SH" >> $GITHUB_ENV
          echo "CORE_SOC_P2_SH=$CORE_SOC_P2_SH" >> $GITHUB_ENV
          echo "CORE_DIY_P1_SH=$CORE_DIY_P1_SH" >> $GITHUB_ENV
          echo "CORE_DIY_P2_SH=$CORE_DIY_P2_SH" >> $GITHUB_ENV
          echo "CORE_DIY_P3_SH=$CORE_DIY_P3_SH" >> $GITHUB_ENV
          echo "CORE_DIY_P4_SH=$CORE_DIY_P4_SH" >> $GITHUB_ENV
          echo "CORE_remove=$CORE_remove" >> $GITHUB_ENV
          echo "CORE_LINUX=$CORE_LINUX" >> $GITHUB_ENV
          echo "CORE_FILES=$CORE_FILES" >> $GITHUB_ENV
          echo "kernel_repo=$kernel_repo" >> $GITHUB_ENV
          echo "kernel_usage=$kernel_usage" >> $GITHUB_ENV
          echo "builder_name=$builder_name" >> $GITHUB_ENV
          echo "auto_kernel=$auto_kernel" >> $GITHUB_ENV
          echo "CORE_Pack=$CORE_Pack" >> $GITHUB_ENV
          echo "CORE_feeds_conf=$CORE_feeds_conf" >> $GITHUB_ENV

      - name: 检查脚本
        run: |
          dos2unix ./Scripts/*.sh
          chmod +x ./Scripts/*.sh
          
          dos2unix ./soc/*.sh
          chmod +x ./soc/*.sh
          
          dos2unix ./patch/*.sh
          chmod +x ./patch/*.sh
          
          dos2unix ./remove/*.sh
          chmod +x ./remove/*.sh
          

      - name: 克隆源码库
        id: codes
        working-directory: /workdir        
        run: |
          # Set up compilation source code
          if [[ "${{ inputs.CORE_URL }}" == *"openwrt/openwrt"* ]]; then
              REPO_URL="https://github.com/openwrt/openwrt"
              REPO_BRANCH="main"
          elif [[ "${{ inputs.CORE_URL }}" == *"coolsnowwolf/lede"* ]]; then
              REPO_URL="https://github.com/coolsnowwolf/lede"
              REPO_BRANCH="master"
          elif [[ "${{ inputs.CORE_URL }}" == *"immortalwrt/immortalwrt"* ]]; then
              REPO_URL="https://github.com/immortalwrt/immortalwrt"
              REPO_BRANCH="master"
          else
              REPO_URL="${{ inputs.CORE_URL }}"
              REPO_BRANCH="${{ inputs.CORE_BRANCH }}"
          fi
          
          if [[ $OWRT_LINUX == *"5.15"* ]] ; then
              REPO_URL="${{ inputs.CORE_URL }}"
              REPO_BRANCH="${{ inputs.CORE_BRANCH }}"
          fi
          
          df -hT $PWD
          git clone -q --single-branch --depth=1 --branch=${REPO_BRANCH} ${REPO_URL} openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
  
      - name: 加载自定义订阅源
        run: |
          cd openwrt
          
          if [[ "${{ inputs.CORE_feeds_conf }}" == *"false"* ]]; then
            echo "使用默认feeds.conf.default文件"
          else
            cp -rf $GITHUB_WORKSPACE/${{ env.CORE_feeds_conf }} ./feeds.conf.default
          fi
          
          ${GITHUB_WORKSPACE}/${CORE_DIY_P1_SH}
          echo "COMMIT_HASH=$(git rev-parse HEAD)" >> $GITHUB_ENV
          
      - name: 补丁
        run: |
          if [[ "${{ inputs.CORE_patch }}" == *"false"* ]]; then
            echo "不需要打补丁"
          else
            ${GITHUB_WORKSPACE}/${CORE_patch}
          fi

      - name: 启动缓存[第二次起生效]
        uses: rmoyulong/cachewrtbuild@main
        with:
          ccache: 'true'
          prefix: ${{ github.workspace }}/openwrt
          mixkey: ${{ env.CORE_URL }}/tree/${{ env.CORE_TARGET }}?device=${{ env.CORE_config }}
          
      - name: 更新订阅源
        run: |
          cd openwrt
          
          ./scripts/feeds update -a
          ./scripts/feeds install -a
         
      - name: 通用脚本
        run: |
          cd openwrt
          
          ${GITHUB_WORKSPACE}/${CORE_DIY_P2_SH}
          
          if [[ "${{ inputs.CORE_DIY_P3_SH }}" == *"false"* ]]; then
            echo "不需要执行 CORE_DIY_P3_SH"
          else
            ${GITHUB_WORKSPACE}/${CORE_DIY_P3_SH}
          fi
          
          if [[ "${{ inputs.CORE_DIY_P4_SH }}" == *"false"* ]]; then
            echo "不需要执行 CORE_DIY_P4_SH"
          else
            ${GITHUB_WORKSPACE}/${CORE_DIY_P4_SH}
          fi 

      - name: 删除冲突的插件
        run: |
          cd openwrt
          
          if [[ "${{ inputs.CORE_remove }}" == *"false"* ]]; then
            echo "不需要删除冲突的插件"
          else
            ${GITHUB_WORKSPACE}/${CORE_remove}
          fi
          
      - name: 拷贝设置文件
        run: |
          cd openwrt
          
          #如果files文件夹不存在，创建文件夹
          if [ ! -d "./files" ]; then
            mkdir ./files
          fi
          [ -e $GITHUB_WORKSPACE/$CORE_FILES ] && cp -rf $GITHUB_WORKSPACE/$CORE_FILES/* ./files
          
          rm -rf ./tmp* ./.config*
          
          if [[ "${{ inputs.CORE_header }}" == *"false"* ]]; then
             echo "没有header config文件"
             ${GITHUB_WORKSPACE}/${CORE_config}  > .config
          else
             cat $GITHUB_WORKSPACE/${CORE_header}  > .config
             cat $GITHUB_WORKSPACE/${CORE_config} >> .config
          fi
          
          make defconfig

      - name: 清除Toolchain
        run: |
          cd openwrt
          make dirclean

      - name: 下载编译依赖
        working-directory: ./openwrt
        run: |
          make download -j$(nproc)
          #make download -j8
          #make -j16 download
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: 编译固件
        working-directory: ./openwrt
        run: |     
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV 

      - name: 单独处理脚本
        run: |
          if [[ "${{ inputs.CORE_SOC_P1_SH }}" == *"false"* ]]; then
            echo "没有需要单独处理的脚本1"
          else
            ${GITHUB_WORKSPACE}/${CORE_SOC_P1_SH}
          fi
          
          if [[ "${{ inputs.CORE_SOC_P2_SH }}" == *"false"* ]]; then
            echo "没有需要单独处理的脚本2"
          else
            ${GITHUB_WORKSPACE}/${CORE_SOC_P2_SH}
          fi
          
      - name: 整理固件--qualcommax
        if: env.CORE_Pack == 'qualcommax'
        run: |
          cd openwrt && mkdir ./upload
          
          rm -rf $(find ./bin/targets/ -iregex ".*\(json\|manifest\|buildinfo\|sha256sums\|packages\)$")
          cp -rf $(find ./bin/targets/ -type f -iname "*.*") ./upload/
          cp -rf ./.config ./upload/Config.txt
          
          export CORE_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S")
          echo "CORE_DATE=$CORE_DATE" >> $GITHUB_ENV

      - name: 生成固件标签
        uses: rmoyulong/action-gh-release@master
        with:
          tag_name: ${{env.CORE_TARGET}}_${{env.CORE_SOURCE}}_${{env.CORE_DATE}}
          files: openwrt/upload/*.*
          body: |
            路由器固件：${{env.CORE_NAME}} ${{env.CORE_tag_name}}
            刷机有风险！刷前需谨慎！
            -----------------------------------------------------
            源码：${{env.CORE_SOURCE}}
            密码：password
            地址：${{env.CORE_IP}}

      - name: 清理Releases
        uses: rmoyulong/delete-older-releases@master
        with:
          keep_latest: 10
          delete_tags: true

      - name: 清理Workflows
        uses: rmoyulong/delete-workflow-runs@main
        with:
          retain_days: 0
          keep_minimum_runs: 1
